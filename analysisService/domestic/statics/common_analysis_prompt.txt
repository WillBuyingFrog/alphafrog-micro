规定：以下所有时间戳的时区默认为北京时间（Asia/Shanghai）。


## 指数业务函数

### 根据指数代码和日期范围查询日线行情

向 `{{baseUrl}}/domestic/index/quote/daily`发送GET请求，需要params：

- ts_code：需要查询的指数代码
- start_date_timestamp：查询起始日期（时分秒统一为00:00:00）的毫秒时间戳
- end_date_timestamp：查询结束日期（时分秒统一为00:00:00）的毫秒时间戳

示例的合法请求：
```
{{baseUrl}}/domestic/index/quote/daily?ts_code=000300.SH&start_date_timestamp=1704038400000&end_date_timestamp=1735574400000
```
以下所述的所有业务接口，若非特别说明，否则合法请求格式均如上所示，即均为GET请求+request params。


返回格式：
```json
{
	"items": [
		{
			(第一个日期的日线数据)
		},
		{
			(第二个日期的日线数据)
		},
		...
	]
}
```

其中，返回日线单个数据的示例是（注意所有属性的返回格式）：
```json
{
  "tsCode": "000300.SH",
  "tradeDate": "1704124800000",  // 注意该属性返回的是字符串格式
  "close": 3386.3522,
  "open": 3426.2684,  // 该属性可能为null
  "high": 3426.2684,  // 该属性可能为null
  "low": 3386.3522,   // 该属性可能为null
  "preClose": 3431.1099,
  "change": -44.7577, 
  "pctChg": -1.3045,
  "vol": 1.16180726E8, // 该属性可能为null
  "amount": 1.84096097449E8  // 该属性可能为null
}
```


### 根据指数代码查询指数信息

向 `{{baseUrl}}/domestic/index/info/ts_code`发送GET请求，需要参数：

- ts_code： 需要查询的指数代码


返回格式示例（注意所有属性的返回格式）：
```json
{
    "item": {
        "tsCode": "000300.SH",
        "name": "沪深300",
        "fullname": "沪深300指数",
        "market": "SSE",
        "publisher": "中证指数有限公司",
        "indexType": "中证规模指数",		// 该属性可能为null
        "category": "规模指数",				 // 该属性可能为null
        "baseDate": "1104422400000",  // 这是时间戳。注意如果需要用到该属性，则需要将其转换为long
        "basePoint": 1000.0,
        "listDate": 1.1128896E12,
        "weightRule": "其他",					// 该属性可能为null
        "desc": "沪深300指数由沪深市场中规模大、流动性好的最具代表性的300只证券组成，于2005年4月8日正式发布，以反映沪深市场上市公司证券的整体表现。"
    }
}
```

### 根据关键词搜索指数

向`{{baseUrl}}/domestic/index/search`发送GET请求，需要参数：

- query：需要查询的关键词


返回格式示例（注意所有属性的返回格式）：
```json
{
    "items": [
        {
            "tsCode": "930955.CSI",
            "name": "红利低波100",
            "fullname": "中证红利低波动100指数",
            "market": "CSI"
        },
        {
            第二个搜索结果（如果有）……
        },
        ...
    ]
}
```


### 根据指数代码和日期范围查询指数成分股


向`{{baseUrl}}/domestic/index/weight/ts_code`发送GET请求，需要参数：

- ts_code： 需要查询的指数代码
- start_date_timestamp：查询起始日期（时分秒统一为00:00:00）的毫秒时间戳
- end_date_timestamp：查询结束日期（时分秒统一为00:00:00）的毫秒时间戳

返回格式示例（注意所有属性的返回格式）：

```json
{
    "items": [
        {
            "indexCode": "000171.CSI", // 查询的指数代码
            "conCode": "300059.SZ",  // 成分股代码
            "tradeDate": "1706630400000",  // 这是时间戳。需要处理这个字段的时候，请先将其转换为long
            "weight": 9.529  // 表示9.529%
        },
        ...
    ]
}
```


### 根据成分股代码和日期范围查询指数


向`{{baseUrl}}/domestic/index/weight/con_code`发送GET请求，需要参数：

- con_code： 需要查询的成分股代码
- start_date_timestamp：查询起始日期（时分秒统一为00:00:00）的毫秒时间戳
- end_date_timestamp：查询结束日期（时分秒统一为00:00:00）的毫秒时间戳



返回格式示例（注意所有属性的返回格式）：

```json
{
    "items": [
        {
            "indexCode": "000171.CSI", // 查询到的含有指定成分股的指数代码
            "conCode": "300059.SZ", // 查询的成分股代码
            "tradeDate": "1735574400000",  // 成分登记时间戳。时间戳处理要点和前述相同
            "weight": 9.529  // 表示9.529%
        },
        ...
    ]
}
```

## 股票业务函数

### 根据股票代码查询股票基本信息

向`{{baseUrl}}/domestic/stock/info/ts_code`发送GET请求，需要参数：

- ts_code： 需要查询的股票代码


返回格式示例（注意没有“items”，并注意所有属性的返回格式）：
```json
{
    "stockInfoId": "2853",
    "tsCode": "600006.SH",
    "symbol": "600006",
    "name": "东风股份",
    "fullName": "东风汽车股份有限公司",
    "enName": "Dongfeng Automobile Co.,Ltd.",
    "cnspell": "dfgf",
    "market": "主板",
    "exchange": "SSE",
    "currType": "CNY",
    "listStatus": "L",
    "listDate": "933004800000",  // 这是时间戳，处理时请先转成long
    "isHs": "H",  // 是否沪深港通标的，N否 H沪股通 S深股通
    "actName": "东风汽车有限公司",  // 实控人名称
    "actEntType": "中央国企"  // 实控人企业性质
}
```

以上参数中，只有stockInfoId, tsCode, symbol, name, cnspell五个参数是必定非空的，剩余的都有可能是null。


### 搜索股票

向`{{baseUrl}}/domestic/stock/search`发送GET请求，需要参数：

- query：查询关键词


返回格式示例：

```json
{
    "items": [
        {
            "tsCode": "600000.SH",	
            "symbol": "600000",			// 六位数股票代码
            "name": "浦发银行",
            "area": "上海",
            "industry": "银行"
        },
        ...
    ]
}
```


### 根据股票代码（不是六位数代码，是后面加上市场标识符的代码）和时间范围查询日线行情

向`{{baseUrl}}/domestic/stock/daily/ts_code`发送GET请求，需要参数：

- ts_code：需要查询的股票代码
- start_date_timestamp：查询起始日期（时分秒统一为00:00:00）的毫秒时间戳
- end_date_timestamp：查询结束日期（时分秒统一为00:00:00）的毫秒时间戳


返回格式示例：

```json
{
    "items": [
        {
            "stockDailyId": "60",
            "tsCode": "000061.SZ",
            "tradeDate": "1736092800000",
            "close": 6.64,
            "open": 6.6,
            "high": 6.7,
            "low": 6.42,
            "preClose": 6.64,
            "change": 0.0,
            "pctChg": 0.0,
            "vol": 84248.55,
            "amount": 55671.809
        },
        ...
    ]
}
```


规定：以下所有时间戳的时区默认为北京时间（Asia/Shanghai）。


## 基金业务函数

### 根据基金代码查询基金信息

向 `{{baseUrl}}/domestic/fund/info/tsCode` 发送 GET 请求,需要参数:

- ts_code:需要查询的基金代码

示例的合法请求:
{{baseUrl}}/domestic/fund/info/tsCode?ts_code=006567.OF


返回格式示例：

```json
{
    "items": [
        {
            "tsCode": "021894.OF",
            "name": "易方达中证半导体材料设备主题联接C",
            "management": "易方达基金",
            "custodian": "中国银行",
            "fundType": "股票型",
            "foundDate": "1732550400000",
            "issueAmount": 3.2293,
            "mFee": 0.5,
            "cFee": 0.1,
            "pValue": 1.0,
            "minAmount": 1.0E-4,
            "benchmark": "中证半导体材料设备主题指数收益率*95%+活期存款利率(税后)*5%",
            "status": "L",
            "investType": "被动指数型",
            "type": "契约型开放式",
            "purcStartDate": "1733414400000",
            "redmStartDate": "1733414400000",
            "market": "O",
            "issueDate": "1730649600000"
        }
    ]
}
```

请注意，除tsCode和name这两个字段必不为null外，其余字段都有可能为null。注意其中所有与日期相关的字段均为毫秒时间戳格式，且为字符串，若要使用，则需要先转换为long类型变量。


### 根据关键词搜索基金

向 `{{baseUrl}}/domestic/fund/search` 发送 GET 请求,需要参数:

- query:需要查询的关键词

返回格式示例：

```json
{
    "items": [
        {
            "tsCode": "021893.OF",
            "name": "易方达中证半导体材料设备主题联接A",
            "management": "易方达基金",
            "fundType": "股票型",
            "foundDate": "1732550400000",
            "benchmark": "中证半导体材料设备主题指数收益率*95%+活期存款利率(税后)*5%"
        },
        ...
    ]
}
```


### 根据基金代码和日期范围查询基金净值

向` {{baseUrl}}/domestic/fund/nav/ts_code`发送 GET 请求,需要参数:

- ts_code:需要查询的基金代码
- start_date_timestamp:查询起始日期(时分秒统一为00:00:00)的毫秒时间戳
- end_date_timestamp:查询结束日期(时分秒统一为00:00:00)的毫秒时间戳

返回格式示例：

```json
{
    "items": [
        {
            "tsCode": "006567.OF",
            "annDate": "1672761600000",	 // 净值公告日期（毫秒时间戳）
            "navDate": "1672675200000",  // 净值日期（毫秒时间戳）
            "unitNav": 2.4277,   // 单位净值
            "accumNav": 2.4277,  // 累计净值
            "adjNav": 2.4277		 // 复权单位净值
        },
        ...
    ]
}
```


### 根据基金代码和日期范围查询基金持仓

向` {{baseUrl}}/domestic/fund/portfolio/ts_code `发送 GET 请求,需要参数:

- ts_code:需要查询的基金代码
- start_date_timestamp:查询起始日期(时分秒统一为00:00:00)的毫秒时间戳
- end_date_timestamp:查询结束日期(时分秒统一为00:00:00)的毫秒时间戳


返回格式示例：

```json
{
    "items": [
        {
            "tsCode": "017415.OF",
            "annDate": "1698163200000",		// 公告日期
            "endDate": "1696003200000",		// 截止日期（即反应的是截至endDate的基金持仓信息）
            "symbol": "601000.SH",				// 持仓股票
            "mkv": 7.950312747E7,					// 持有股票市值（元）
            "amount": 2.1545563E7,				// 持有股票数量（股）
            "sktMkvRatio": 5.11,					// 该持仓占该基金所有持仓的市值比例
            "sktFloatRatio": 0.36					// 占流通股本比例
        },
        ...
    ]
}
```


### 根据成分股代码和日期范围查询基金持仓


向` {{baseUrl}}/domestic/fund/portfolio/symbol` 发送 GET 请求,需要参数:

- symbol:需要查询的成分股代码
- start_date_timestamp:查询起始日期(时分秒统一为00:00:00)的毫秒时间戳
- end_date_timestamp:查询结束日期(时分秒统一为00:00:00)的毫秒时间戳


返回格式示例：

```json
{
    "items": [
        {
            "tsCode": "017415.OF",
            "annDate": "1698163200000",		// 公告日期
            "endDate": "1696003200000",		// 截止日期（即反应的是截至endDate的基金持仓信息）
            "symbol": "601000.SH",				// 持仓股票
            "mkv": 7.950312747E7,					// 持有股票市值（元）
            "amount": 2.1545563E7,				// 持有股票数量（股）
            "sktMkvRatio": 5.11,					// 该持仓占该基金所有持仓的市值比例
            "sktFloatRatio": 0.36					// 占流通股本比例
        },
        ...
    ]
}
```



你需要根据以上提供的接口来解决指定的需求。

假设一共有n个请求，那么你的输出需严格遵循以下格式，不能输出任何其他内容：

需求1
```python
(你的代码，附带适当注释)
```
需求2
```python
(你的代码，附带适当注释)
```
...
需求n
```python
(你的代码，附带适当注释)
```

请根据每个需求之间的联系，合理安排每个脚本的输入输出，特别注意靠后的需求是否需要靠前的需求的结果。

你为每个需求编写的代码都必须可以单独运行。

所提出的具体需求如下：
